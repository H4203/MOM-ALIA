:- dynamic pawn/3.
:- dynamic action/3.
action/3.
gameover :- not(pawn(_,_,'w')), writeln('Les noirs ont gagné').
gameover :- not(pawn(_,_,'b')), writeln('Les blancs ont gagné').

printVal(Y,X) :- pawn(X,Y,Val), write(Val),!.  %, var(Val)
printVal(_,_) :- write('\t_\t'). %,nonvar(Val)

displayBoard :-
     findall(_, partialDisplayBoard, _).   

partialDisplayBoard :-
    between(0, 9, I), writeln(''),
    between(0, 9, J),
    printVal(I,J).

nextPlayer('b','w').
nextPlayer('w','b').

applyEat(Action, Pawn) :-

    Action = action(_, XDest, YDest),
    Pawn = pawn(X, Y, Player),
    XE is (XDest + X) / 2, 
    YE is (YDest + Y) / 2, 
    nextPlayer(Player, NextPlayer),
    retract(pawn(XE, YE, NextPlayer)).

applyMove(Action, Pawn) :-

    Action = action(_, XDest, YDest),
    Pawn = pawn(X, Y, Player),

    retract(pawn(X, Y, Player)),
    assert(pawn(XDest, YDest, Player)).
    
applyAction(Action, Pawn) :-
    
    Action = action(Type, XDest, YDest),
    Pawn = _,
    
    Type == 'Move', writeln('test'), applyMove(Action, Pawn),
    
    retract(action(Type, XDest, YDest)).
    
applyAction(Action, Pawn) :-
    
    Action = action(Type, XDest, YDest),
    Pawn = _,
    
    (Type == 'Eat',  writeln('test2'), applyEat(Action, Pawn)),
    
    applyMove(Action, Pawn),
    
    retract(action(Type, XDest, YDest)).

applyActions([], _).
    
applyActions(Actions, Pawn) :-
    
    Actions = [Head|Tail],
    
    applyAction(Head, Pawn),
    applyActions(Tail, Pawn).

play(_) :- gameover.
play(Player) :- write('New turn for:'), writeln(Player),
    displayBoard,
    aiLevel(Niveau, Player),
    ai(Niveau,Player,Pawn,ActionList),
    applyActions(ActionList,Pawn),
    nextPlayer(Player,NextPlayer),
    play(NextPlayer). 

init :- 
    assert(pawn(1,0,'b')), assert(pawn(3,0,'b')), assert(pawn(5,0,'b')), assert(pawn(7,0,'b')), assert(pawn(9,0,'b')),
    assert(pawn(0,1,'b')), assert(pawn(2,1,'b')), assert(pawn(4,1,'b')), assert(pawn(6,1,'b')), assert(pawn(8,1,'b')),
    assert(pawn(1,2,'b')), assert(pawn(3,2,'b')), assert(pawn(5,2,'b')), assert(pawn(7,2,'b')), assert(pawn(9,2,'b')),
    assert(pawn(0,3,'b')), assert(pawn(2,3,'b')), assert(pawn(4,3,'b')), assert(pawn(6,3,'b')), assert(pawn(8,3,'b')),
        
    assert(pawn(1,6,'w')), assert(pawn(3,6,'w')), assert(pawn(5,6,'w')), assert(pawn(7,6,'w')), assert(pawn(9,6,'w')),
    assert(pawn(0,7,'w')), assert(pawn(2,7,'w')), assert(pawn(4,7,'w')), assert(pawn(6,7,'w')), assert(pawn(8,7,'w')),
    assert(pawn(1,8,'w')), assert(pawn(3,8,'w')), assert(pawn(5,8,'w')), assert(pawn(7,8,'w')), assert(pawn(9,8,'w')),
    assert(pawn(0,9,'w')), assert(pawn(2,9,'w')), assert(pawn(4,9,'w')), assert(pawn(6,9,'w')), assert(pawn(8,9,'w')),
    play('b').

%-------------------------------
aiLevel(1,'w').
aiLevel(1,'b').
%-------------------------------
isSameGroup('w','w').
isSameGroup('wq','w').
isSameGroup('w','wq').

isSameGroup('b','b').
isSameGroup('bq','b').
isSameGroup('b','bq').
%-------------------------------

% direction 0:up-left 1:up-right 2:down-left 3:down-right
isGoodDirection(0,'w').
isGoodDirection(1,'w').
isGoodDirection(2,'b').
isGoodDirection(3,'b').
isGoodDirection(_,'wq').
isGoodDirection(_,'bq').


computeNewPosition(0,NumberOfCases,OldX,OldY,NewX,NewY):-NewX is OldX-NumberOfCases, NewY is OldY-NumberOfCases.
computeNewPosition(1,NumberOfCases,OldX,OldY,NewX,NewY):-NewX is OldX+NumberOfCases, NewY is OldY-NumberOfCases.
computeNewPosition(2,NumberOfCases,OldX,OldY,NewX,NewY):-NewX is OldX-NumberOfCases, NewY is OldY+NumberOfCases.
computeNewPosition(3,NumberOfCases,OldX,OldY,NewX,NewY):-NewX is OldX+NumberOfCases, NewY is OldY+NumberOfCases.

numberToType('Eat',0).
numberToType('Move',1).

choosePawn(Player,pawn(X,Y,Role)):-
    repeat,
    X is random(10),
    Y is random(10),
    pawn(X,Y,Role),
    isSameGroup(Role,Player),!.

 isGoodAction('Eat',pawn(X,Y,Role),Direction):- 
    computeNewPosition(Direction,1,X,Y,NewX1,NewY1),
    NewX1>=0,NewX1<10,NewY1>=0,NewY1<10,
    pawn(NewX1,NewY1,NewRole1), 
    not(isSameGroup(Role,NewRole1)),
    computeNewPosition(Direction,2,X,Y,NewX2,NewY2),
    NewX2>=0,NewX2<10,NewY2>=0,NewY2<10, 
    not(pawn(NewX2,NewY2,_)).

 isGoodAction('Move',pawn(X,Y,_),Direction):- 
    computeNewPosition(Direction,1,X,Y,NewX1,NewY1),
    NewX1>=0,NewX1<10,NewY1>=0,NewY1<10,
    not(pawn(NewX1,NewY1,_)).

chooseAction(pawn(X,Y,Role),ActionList):-
%    Direction is random(4), write('Direction'), writeln(Direction),
    isGoodDirection(Direction,Role),
%    Random is random(2),write('Random'),
    between(0,1,Random),
    numberToType(Type,Random),
    isGoodAction(Type,pawn(X,Y,Role),Direction), writeln('good action'),
    createAction(Type,X,Y,Role,Direction,ActionList), writeln('createAction done'),
    
    !.
   
    
createAction('Eat',X,Y,Role,Direction,ActionList):-write('eat'),
     computeNewPosition(Direction,1,X,Y,NewX,NewY),
    computeNewPosition(Direction,2,X,Y,XDest,YDest),
    appendAction([action('Eat',XDest,YDest)],[],ActionList),
    assert(action('Eat',XDest,YDest)),
    cantEatMore([pawn(NewX,NewY,NewRole)], NewX2, NewY2, Role, ActionList)
    .

createAction('Move',X,Y,_,Direction,ActionList):-
    computeNewPosition(Direction,1,X,Y,XDest,YDest),
    appendAction([action('Move',XDest,YDest)],[],ActionList), assert(action('Move',XDest,YDest)).
 
appendAction([],L,L).
appendAction([H|T],L,[H|B]) :- append(T,L,B).    

%appendAction([],L,L).
%appendAction([action(Type,X,Y)|T],L,[action(Type,X,Y)|B]) :- appendAction(T,L,B).    

cantEatMore(AlreadyEaten, X, Y, Role, _) :- 
    not((   computeNewPosition(0,1,X,Y,NewX,NewY),
            NewX>=0,NewX<10,NewY>=0,NewY<10,
            pawn(NewX,NewY,NewRole), 
            not(isSameGroup(Role,NewRole)),
            computeNewPosition(0,2,X,Y,NewX2,NewY2),
            NewX2>=0,NewX2<10,NewY2>=0,NewY2<10,
            not(pawn(NewX2,NewY2,_)),
            member(pawn(NewX,NewY,NewRole),AlreadyEaten)
        );
        (   computeNewPosition(1,1,X,Y,NewX,NewY),
            NewX>=0,NewX<10,NewY>=0,NewY<10,
            pawn(NewX,NewY,NewRole), 
            not(isSameGroup(Role,NewRole)),
            computeNewPosition(1,2,X,Y,NewX2,NewY2),
            NewX2>=0,NewX2<10,NewY2>=0,NewY2<10,
            not(pawn(NewX2,NewY2,_)),
            member(pawn(NewX,NewY,NewRole),AlreadyEaten)
        );
        (   computeNewPosition(2,1,X,Y,NewX,NewY),
            NewX>=0,NewX<10,NewY>=0,NewY<10,
            pawn(NewX,NewY,NewRole), 
            not(isSameGroup(Role,NewRole)),
            computeNewPosition(2,2,X,Y,NewX2,NewY2),
            NewX2>=0,NewX2<10,NewY2>=0,NewY2<10,
            not(pawn(NewX2,NewY2,_)),
            member(pawn(NewX,NewY,NewRole),AlreadyEaten)
        );
        (    computeNewPosition(3,1,X,Y,NewX,NewY),
            NewX>=0,NewX<10,NewY>=0,NewY<10,
            pawn(NewX,NewY,NewRole), 
            not(isSameGroup(Role,NewRole)),
            computeNewPosition(3,2,X,Y,NewX2,NewY2),
            NewX2>=0,NewX2<10,NewY2>=0,NewY2<10,
            not(pawn(NewX2,NewY2,_)),
            member(pawn(NewX,NewY,NewRole),AlreadyEaten)
        )
      ),!.

cantEatMore(AlreadyEaten, X, Y, Role, ActionList) :- 
    repeat, 
    computeNewPosition(Direction,1,X,Y,NewX,NewY),
    NewX>=0,NewX<10,NewY>=0,NewY<10,
    pawn(NewX,NewY,NewRole),                                                             
    not(isSameGroup(Role,NewRole)),                                                             
    member(pawn(NewX,NewY,NewRole),AlreadyEaten),                                                            
    computeNewPosition(Direction,2,X,Y,NewX2,NewY2), 
    NewX2>=0,NewX2<10,NewY2>=0,NewY2<10,
    not(pawn(NewX2,NewY2,_)), 
 
    %-----------------------------------------------------------------------------
    %------------------NewActionList is le return of the fonction
    appendAction(action('Eat', NewX2, NewY2),ActionList,NewActionList),
    %-----------------------------------------------------------------------------
    
    cantEatMore([pawn(NewX,NewY,NewRole)|AlreadyEaten],NewX2, NewY2,Role,ActionList),                                                        
    !.


ai(1,Player,pawn(X,Y,Role),ActionList):-writeln(''),repeat,
    choosePawn(Player,pawn(X,Y,Role)),
    chooseAction(pawn(X,Y,Role),ActionList),
    writeln(''),!.
